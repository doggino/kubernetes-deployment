#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/src/common.bash"

echo "Checking docker engine..."

if ! docker info &>/dev/null; then
	echo "Missing docker engine to build images."
	echo "Running docker:dind locally with graph driver pointing to '/cache/docker'"

	if ! grep -q overlay /proc/filesystems; then
		echo "Missing overlay filesystem. Are you running recent enough kernel?"
		exit 1
	fi

  if [[ ! -d /cache ]]; then
    mkdir -p /cache
    mount -t tmpfs tmpfs /cache
  fi

	dockerd \
		--host=unix:///var/run/docker.sock \
		--storage-driver=overlay \
		--graph=/cache/docker & &>/docker.log

  trap 'kill %%' EXIT

	echo "Waiting for docker..."
	for i in $(seq 1 60); do
		if docker info &> /dev/null; then
			break
		fi
		sleep 1s
	done

	if [[ "$i" == 60 ]]; then
		echo "Failed to start docker:dind..."
		cat /docker.log
		exit 1
	fi
	echo ""
fi

echo "Running tests for application using gitlab-org/herokuish docker image..."
docker run --rm \
  -v "$(pwd):/tmp/app:ro" \
  -v "/cache/herokuish:/tmp/cache" \
  registry.gitlab.com/gitlab-org/herokuish /bin/herokuish buildpack test
echo ""
